//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SkpServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://skp.com/", ConfigurationName="SkpServiceReference.ServiceSoap")]
    public interface ServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/loadp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string loadp(string kont, string pwd, string pv, string vs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/loadp", ReplyAction="*")]
        System.Threading.Tasks.Task<string> loadpAsync(string kont, string pwd, string pv, string vs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_New", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string XD_New(string comp, string ydinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_New", ReplyAction="*")]
        System.Threading.Tasks.Task<string> XD_NewAsync(string comp, string ydinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_Tel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string XD_NEW_Tel(string comp, string tel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_Tel", ReplyAction="*")]
        System.Threading.Tasks.Task<string> XD_NEW_TelAsync(string comp, string tel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_Ds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string XD_NEW_Ds(string comp, string site, long ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_Ds", ReplyAction="*")]
        System.Threading.Tasks.Task<string> XD_NEW_DsAsync(string comp, string site, long ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_NUM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string XD_NEW_NUM(string comp, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_NUM", ReplyAction="*")]
        System.Threading.Tasks.Task<string> XD_NEW_NUMAsync(string comp, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_close", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string XD_NEW_close(string comp, string dh, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://skp.com/XD_NEW_close", ReplyAction="*")]
        System.Threading.Tasks.Task<string> XD_NEW_closeAsync(string comp, string dh, string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ServiceSoapChannel : SkpServiceReference.ServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<SkpServiceReference.ServiceSoap>, SkpServiceReference.ServiceSoap
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string loadp(string kont, string pwd, string pv, string vs)
        {
            return base.Channel.loadp(kont, pwd, pv, vs);
        }
        
        public System.Threading.Tasks.Task<string> loadpAsync(string kont, string pwd, string pv, string vs)
        {
            return base.Channel.loadpAsync(kont, pwd, pv, vs);
        }
        
        public string XD_New(string comp, string ydinfo)
        {
            return base.Channel.XD_New(comp, ydinfo);
        }
        
        public System.Threading.Tasks.Task<string> XD_NewAsync(string comp, string ydinfo)
        {
            return base.Channel.XD_NewAsync(comp, ydinfo);
        }
        
        public string XD_NEW_Tel(string comp, string tel)
        {
            return base.Channel.XD_NEW_Tel(comp, tel);
        }
        
        public System.Threading.Tasks.Task<string> XD_NEW_TelAsync(string comp, string tel)
        {
            return base.Channel.XD_NEW_TelAsync(comp, tel);
        }
        
        public string XD_NEW_Ds(string comp, string site, long ds)
        {
            return base.Channel.XD_NEW_Ds(comp, site, ds);
        }
        
        public System.Threading.Tasks.Task<string> XD_NEW_DsAsync(string comp, string site, long ds)
        {
            return base.Channel.XD_NEW_DsAsync(comp, site, ds);
        }
        
        public string XD_NEW_NUM(string comp, string name)
        {
            return base.Channel.XD_NEW_NUM(comp, name);
        }
        
        public System.Threading.Tasks.Task<string> XD_NEW_NUMAsync(string comp, string name)
        {
            return base.Channel.XD_NEW_NUMAsync(comp, name);
        }
        
        public string XD_NEW_close(string comp, string dh, string name)
        {
            return base.Channel.XD_NEW_close(comp, dh, name);
        }
        
        public System.Threading.Tasks.Task<string> XD_NEW_closeAsync(string comp, string dh, string name)
        {
            return base.Channel.XD_NEW_closeAsync(comp, dh, name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://101.201.225.74:35/service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://101.201.225.74:35/service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ServiceSoap,
            
            ServiceSoap12,
        }
    }
}
